apply plugin: 'com.gradle.build-scan'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'codenarc'
apply plugin: 'io.spring.dependency-management'

version = "${version}"
group = "${group}"
mainClassName = 'sample.ExampleGreetingsApplication'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2" }
        maven { url 'http://repo.spring.io/milestone' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}"
        classpath "com.gradle:build-scan-plugin:1.9"
    }
}

jar {
    baseName = 'spring-restdocs-sample'
    version =  '0.0.1'
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    mavenCentral()
    maven { url 'http://repo.spring.io/milestone' }
}

dependencies {
    compile 'org.codehaus.groovy:groovy'
    compile "org.springframework.boot:spring-boot-starter-webflux:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBootVersion"
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.projectreactor:reactor-test'
    testCompile "org.spockframework:spock-spring:${spockVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.springframework.restdocs:spring-restdocs-webtestclient:${springRestDocsVersion}"
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    dependsOn test
    sourceDir = file('src/docs')
    outputDir "$projectDir/src/main/resources/public"
    inputs.dir snippetsDir
    backends 'html5'
    attributes 'source-highlighter' : 'prettify',
            'imagesdir':'images',
            'toc':'left',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'',
            'idseparator':'-',
            'docinfo1':'true',
            'snippets': snippetsDir
}


task cleanTempDir(type: Delete) {
    delete fileTree(dir: 'src/main/resources/public')
}

clean {
    dependsOn cleanTempDir
}

build {
    dependsOn asciidoctor
}

codenarc {
    toolVersion = '1.0'
}

codenarcMain {
    ignoreFailures false
    configFile file('gradle/codenarc/codenarc.groovy')
}

codenarcTest {
    configFile file('gradle/codenarc/codenarcTest.groovy')
}

task publish(type: GradleBuild) {
    dependsOn asciidoctor
    buildFile = file('publish.gradle')
    tasks = ['publishGhPages']
}

ext['spring-restdocs.version'] = springRestDocsVersion

//buildScan {
//    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
//    licenseAgree = 'yes'
//    publishAlways()
//}
